from aiogram import types
from aiogram.dispatcher import FSMContext
import aiogram.utils.markdown as fmt
from src.states import AddCategory, MainMenu
from datetime import datetime


class AddChange:
    def __init__(self, db):
        self.db = db

    async def start_spend(self, call: types.CallbackQuery, state: FSMContext):
        await state.update_data(type='spending')
        await state.update_data(text='—Ç—Ä–∞—Ç—ã')
        user_data = await state.get_data()
        await call.message.delete_reply_markup()
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        default = self.db.get_settings(call.from_user)
        buttons = [default['sp1'], default['sp2'], default['sp3']]
        keyboard.add(*buttons)
        await call.message.answer(
            fmt.text(
                '–í—ã–±–µ—Ä–∏—Ç–µ ', fmt.hbold('–∫–∞—Ç–µ–≥–æ—Ä–∏—é'), f' {user_data["text"]} —Å–æ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. üìö'
            ),
            reply_markup=keyboard, parse_mode='HTML'
        )
        await state.set_state(AddCategory.choose_category)

    async def start_profit(self, call: types.CallbackQuery, state: FSMContext):
        await state.update_data(type='profit')
        await state.update_data(text='–ø—Ä–∏–±—ã–ª–∏')
        user_data = await state.get_data()
        await call.message.delete_reply_markup()
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        default = self.db.get_settings(call.from_user)
        buttons = [default['pr1'], default['pr2'], default['pr3']]
        keyboard.add(*buttons)
        await call.message.answer(
            fmt.text(
                '–í—ã–±–µ—Ä–∏—Ç–µ ', fmt.hbold('–∫–∞—Ç–µ–≥–æ—Ä–∏—é'), f' {user_data["text"]} —Å–æ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. üìö'
            ),
            reply_markup=keyboard, parse_mode='HTML'
        )
        await state.set_state(AddCategory.choose_category)

    async def category(self, message: types.Message, state: FSMContext):
        await state.update_data(category=message.text)
        user_data = await state.get_data()
        await message.answer(
            fmt.text(
                '–ù–∞–ø–∏—à–∏—Ç–µ ', fmt.hbold('–Ω–∞–∑–≤–∞–Ω–∏–µ'), f' {user_data["text"]} –∏–ª–∏ –∂–µ –µ–µ ', fmt.hbold('–æ–ø–∏—Å–∞–Ω–∏–µ'), ' üè∑'
            ), parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(AddCategory.choose_name)

    async def name(self, message: types.Message, state: FSMContext):
        await state.update_data(name=message.text)
        user_data = await state.get_data()
        await message.answer(
            fmt.text(
                f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {user_data["text"]} –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ',
                fmt.hcode('1800'), ' –∏–ª–∏ ', fmt.hcode('244.33'), ' üíµ'
            ), parse_mode='HTML'
        )
        await state.set_state(AddCategory.choose_value)

    async def value(self, message: types.Message, state: FSMContext):
        try:
            number = float(message.text)
            if (number.is_integer() or round(number, 2) == number) and number > 0:
                await state.update_data(value=number)
                await state.update_data(time=datetime.now().timestamp())
                user_data = await state.get_data()
                time = datetime.fromtimestamp(user_data["time"]).strftime("%d.%m.%Y %H:%M")
                keyboard = types.InlineKeyboardMarkup()
                buttons = [
                    types.InlineKeyboardButton(text='–î–∞ ‚úÖ', callback_data='confirm'),
                    types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='cancel')
                ]
                keyboard.add(*buttons)
                await message.answer(
                    fmt.text(
                        fmt.hbold('–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º!\n'),
                        fmt.text(fmt.hunderline('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:'), f' {time}'),
                        fmt.text(fmt.hunderline('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:'), f' {user_data["category"]}'),
                        fmt.text(fmt.hunderline('–û–ø–∏—Å–∞–Ω–∏–µ:'), f' {user_data["name"]}'),
                        fmt.text(fmt.hunderline('–°—É–º–º–∞:'), f' {user_data["value"]}\n'),
                        fmt.hbold('–í—Å–µ –≤–µ—Ä–Ω–æ?'),
                        sep='\n'
                    ), parse_mode='HTML', reply_markup=keyboard
                )
                await state.set_state(AddCategory.confirm_change)
            else:
                await message.reply(
                    fmt.text(
                        '–ú–Ω–æ–≥–æ–≤–∞—Ç–æ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π üò¨\n',
                        fmt.hbold('–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑!'),
                        sep=''
                    ), parse_mode='HTML'
                )
        except ValueError:
            await message.reply(
                fmt.text(
                    '–¢—ã –ª–∏–±–æ –≤–≤–µ–ª ', fmt.hbold('–±—É–∫–≤—ã'), ', –ª–∏–±–æ –≤–º–µ—Å—Ç–æ ',
                    fmt.hbold('—Ç–æ—á–∫–∏'), ' –≤–≤–µ–ª ', fmt.hbold('–∑–∞–ø—è—Ç—É—é'), ' üò¨\n',
                    fmt.hbold('–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑!'),
                    sep=''
                ), parse_mode='HTML'
            )

    async def confirm(self, call: types.CallbackQuery, state: FSMContext):
        await call.message.delete_reply_markup()
        user_data = await state.get_data()
        self.db.add_transaction(user_data, call.from_user)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Ü©', callback_data='cancel'))
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ! –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. üíæ', reply_markup=keyboard)
        await state.set_state(MainMenu.anti_input)
