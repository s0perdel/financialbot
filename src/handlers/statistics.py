from aiogram import types
from aiogram.dispatcher import FSMContext
import aiogram.utils.markdown as fmt
from src.states import StatsMenu, MainMenu
from datetime import datetime, timedelta
import re


class Statistics:
    def __init__(self, db):
        self.db = db

    async def start(self, call: types.CallbackQuery, state: FSMContext):
        await state.finish()
        await state.set_state(StatsMenu.stats_menu)
        await call.message.delete_reply_markup()
        spending_categories = self.db.get_categories(call.from_user, 'spending')
        profit_categories = self.db.get_categories(call.from_user, 'profit')
        if spending_categories is not None:
            spending = fmt.text(fmt.hunderline('–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:'), ' ', ', '.join(spending_categories), '\n')
        else:
            spending = fmt.text(fmt.hunderline('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç!\n'))
        if profit_categories is not None:
            profit = fmt.text(fmt.hunderline('–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–±—ã–ª–∏:'), ' ', ', '.join(profit_categories), '\n')
        else:
            profit = fmt.text(fmt.hunderline('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏–±—ã–ª–∏!\n'))
        try:
            limits = await state.get_data()
            limits = limits['limits']
        except KeyError:
            limits = self.db.get_limits(call.from_user)
            await state.update_data(limits=limits)
        if limits[0] is not None:
            spending_sum = fmt.text(
                '–ë—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ', fmt.hitalic(self.db.get_sum(call.from_user, "spending", limits)), ' –≥—Ä–Ω.\n'
            )
            profit_sum = fmt.text(
                '–ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ: ', fmt.hitalic(self.db.get_sum(call.from_user, "profit", limits)), ' –≥—Ä–Ω.\n'
            )
            period = fmt.text(
                '–í –ø–µ—Ä–∏–æ–¥ —Å ',
                fmt.hbold(datetime.fromtimestamp(limits[0]).strftime('%d.%m.%Y')),
                ' –ø–æ ',
                fmt.hbold(datetime.fromtimestamp(limits[1]).strftime('%d.%m.%Y')),
                '\n'
            )
        else:
            period = fmt.text('–í–Ω–µ—Å–∏—Ç–µ –∫–∞–∫–∏–µ –Ω–∏–±—É–¥—å –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å –∫–∞–∫–∞—è –Ω–∏–±—É–¥—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. üôÇ\n')
            spending_sum = fmt.text('–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —Ç—Ä–∞—Ç!\n')
            profit_sum = fmt.text('–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–±—ã–ª–∏!\n')
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Ü©', callback_data='cancel'))
        await call.message.edit_text(
            fmt.text(
                fmt.hbold('–ú–ï–ù–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–ò üëÅ\n'),
                spending,
                profit,
                period,
                spending_sum,
                profit_sum,
                fmt.text('/date —Å–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫'),
                fmt.text('/categories –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'),
                fmt.text('/all –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞—à –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'),
                fmt.text('/edit [id] —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫—É—é —Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π '
                         '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å–∏–≤ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'),
                fmt.text('/delete [id] —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'),
                sep='\n'
            ), parse_mode='HTML', reply_markup=keyboard
        )

    async def change_date(self, message: types.Message, state: FSMContext):
        await state.set_state(StatsMenu.change_date)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        keyboard.add(*['–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å', '–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü'])
        await message.answer(
            fmt.text(
                fmt.hbold('–°–ú–ï–ù–ê –î–ê–¢–´:\n'),
                fmt.text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å–æ —Å–ø–∏—Å–∫–∞ –ª–∏–±–æ –∂–µ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ',
                         fmt.hcode('01.02.2022-20.03.2022')),
                sep='\n'
            ), parse_mode='HTML', reply_markup=keyboard
        )

    async def incorrect_input(self, message: types.Message):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É! üò¨')

    async def confirm_date(self, message: types.Message, state: FSMContext):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='stats'))
        if re.match(r'^\d{1,2}\.\d{1,2}\.\d{4}-\d{1,2}\.\d{1,2}\.\d{4}$', message.text):
            dates = message.text.split('-')
            limits = [
                datetime.strptime(dates[0], '%d.%m.%Y').timestamp(),
                datetime.strptime(dates[1], '%d.%m.%Y') + timedelta(hours=23, minutes=59)
            ]
            limits[1] = limits[1].timestamp()
            await state.update_data(limits=limits)
            await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=types.ReplyKeyboardRemove())
            await message.answer('–î–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. ‚úÖ', reply_markup=keyboard)
            await state.set_state(MainMenu.anti_input)
        else:
            if message.text == '–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å':
                today = datetime.today().strftime('%d.%m.%Y')
                limits = [
                    datetime.strptime(today, '%d.%m.%Y').timestamp(),
                    datetime.strptime(today, '%d.%m.%Y') + timedelta(hours=23, minutes=59)
                ]
                limits[1] = limits[1].timestamp()
                await state.update_data(limits=limits)
                await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=types.ReplyKeyboardRemove())
                await message.answer('–î–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. ‚úÖ', reply_markup=keyboard)
                await state.set_state(MainMenu.anti_input)
            elif message.text == '–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è':
                today = datetime.today().strftime('%d.%m.%Y')
                limits = [
                    datetime.strptime(today, '%d.%m.%Y') - timedelta(days=7),
                    datetime.strptime(today, '%d.%m.%Y') + timedelta(hours=23, minutes=59)
                ]
                limits = [a.timestamp() for a in limits]
                await state.update_data(limits=limits)
                await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=types.ReplyKeyboardRemove())
                await message.answer('–î–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. ‚úÖ', reply_markup=keyboard)
                await state.set_state(MainMenu.anti_input)
            elif message.text == '–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü':
                today = datetime.today().strftime('%d.%m.%Y')
                limits = [
                    datetime.strptime(today, '%d.%m.%Y') - timedelta(days=30),
                    datetime.strptime(today, '%d.%m.%Y') + timedelta(hours=23, minutes=59)
                ]
                limits = [a.timestamp() for a in limits]
                await state.update_data(limits=limits)
                await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=types.ReplyKeyboardRemove())
                await message.answer('–î–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. ‚úÖ', reply_markup=keyboard)
                await state.set_state(MainMenu.anti_input)
            else:
                await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! –ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ üò¨')

    async def show_categories(self, message: types.Message, state: FSMContext):
        sp_categories, pr_categories = None, None
        data = await state.get_data()
        if data['limits'] is not None:
            sp_categories = self.db.get_categories_bydate(message.from_user, 'spending', data['limits'])
            pr_categories = self.db.get_categories_bydate(message.from_user, 'profit', data['limits'])
        if sp_categories is None and pr_categories is None:
            await message.answer(
                fmt.text(
                    fmt.hbold('–û–®–ò–ë–ö–ê üòî\n'),
                    fmt.text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.'),
                    fmt.text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –ª–∏–±–æ /cancel —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.'),
                    sep='\n'
                ), parse_mode='HTML'
            )
        else:
            sp_result, pr_result = [], []
            if sp_categories is not None:
                total_value = self.db.get_sum(message.from_user, 'spending', data['limits'])
                for category in sp_categories:
                    value = self.db.get_sum_bycategory(message.from_user, 'spending', data['limits'], category)
                    sp_result.append(
                        fmt.text(
                            fmt.hunderline(f'{category}:'),
                            fmt.text(f'{value} –≥—Ä–Ω ({round((value/total_value)*100, 2)}%)'),
                            sep=' '
                        )
                    )
            else:
                sp_result.append(fmt.text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç üòî'))
            if pr_categories is not None:
                total_value = self.db.get_sum(message.from_user, 'profit', data['limits'])
                for category in pr_categories:
                    value = self.db.get_sum_bycategory(message.from_user, 'profit', data['limits'], category)
                    pr_result.append(
                        fmt.text(
                            fmt.hunderline(f'{category}:'),
                            fmt.text(f'{value} –≥—Ä–Ω ({round((value/total_value)*100, 2)}%)'),
                            sep=' '
                        )
                    )
            else:
                pr_result.append(fmt.text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏–±—ã–ª–∏ üòî'))
            date_from = datetime.fromtimestamp(data['limits'][0]).strftime('%d.%m.%Y')
            date_to = datetime.fromtimestamp(data['limits'][1]).strftime('%d.%m.%Y')
            await message.answer(
                fmt.text(
                    fmt.hbold('–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n'),
                    fmt.text(f'–í–∑—è—Ç –ø–µ—Ä–∏–æ–¥ —Å {date_from} –ø–æ {date_to}\n'),
                    fmt.hbold('–¢–†–ê–¢–´:'),
                    *sp_result,
                    fmt.hbold('\n–ü–†–ò–ë–´–õ–¨:'),
                    *pr_result,
                    fmt.text('\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∂–µ /cancel –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                    sep='\n'
                ), parse_mode='HTML'
            )

    async def get_all(self, message: types.Message):
        data = self.db.get_all_transactions(message.from_user)
        await message.answer_document(types.InputFile(data, filename='transactions.csv'))
        await message.answer(
            fmt.text(
                fmt.text('–í—Å–µ –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üîù'),
                fmt.text('–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∂–µ /cancel –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                sep='\n'
            )
        )

    async def edit_transaction(self, message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        try:
            transaction_id = user_data['transaction_id']
            actual_state = await state.get_state()
            if actual_state == 'StatsMenu:edit_category':
                await state.update_data(category=message.text)
            elif actual_state == 'StatsMenu:edit_name':
                await state.update_data(name=message.text)
            elif actual_state == 'StatsMenu:edit_value':
                try:
                    number = float(message.text)
                    if (number.is_integer() or round(number, 2) == number) and number > 0:
                        await state.update_data(value=number)
                    else:
                        await message.reply(
                            fmt.text(
                                '–ú–Ω–æ–≥–æ–≤–∞—Ç–æ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π üò¨\n',
                                fmt.hbold('–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑!'),
                                sep=''
                            ), parse_mode='HTML'
                        )
                        return
                except ValueError:
                    await message.reply(
                        fmt.text(
                            '–¢—ã –ª–∏–±–æ –≤–≤–µ–ª ', fmt.hbold('–±—É–∫–≤—ã'), ', –ª–∏–±–æ –≤–º–µ—Å—Ç–æ ',
                            fmt.hbold('—Ç–æ—á–∫–∏'), ' –≤–≤–µ–ª ', fmt.hbold('–∑–∞–ø—è—Ç—É—é'), ' üò¨\n',
                            fmt.hbold('–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑!'),
                            sep=''
                        ), parse_mode='HTML'
                    )
                    return
            elif actual_state == 'StatsMenu:edit_date':
                try:
                    dtt = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
                    if dtt > datetime.now():
                        await message.reply('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±—É–¥—É—â–µ–º? üòÉ\n–í–≤–µ–¥–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É')
                        return
                    await state.update_data(date=dtt.strftime('%d.%m.%Y %H:%M'))
                except ValueError:
                    await message.reply(
                        fmt.text(
                            '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM üò¨'
                        )
                    )
                    return
        except KeyError:
            transaction_id = message.text.replace('/edit ', '')
        if not transaction_id.isdigit():
            await message.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ /edit 293')
        else:
            if not self.db.check_id(message.from_user, transaction_id):
                await message.reply('–£ –≤–∞—Å –Ω–µ —Ç–∞–∫–æ–≥–æ ID üò≥\n–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!')
            else:
                await state.update_data(transaction_id=transaction_id)
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                buttons = [
                    types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üìö', callback_data='edit_category'),
                    types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ üè∑', callback_data='edit_name'),
                    types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É üíµ', callback_data='edit_value'),
                    types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è/–¥–∞—Ç—É ‚è∞', callback_data='edit_date'),
                    types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è üíæ', callback_data='save_edit')
                ]
                keyboard.add(*buttons)
                await state.set_state(MainMenu.anti_input)
                try:
                    user_data = await state.get_data()
                    tp = user_data['tp']
                    value = user_data['value']
                    name = user_data['name']
                    category = user_data['category']
                    date = user_data['date']
                    await message.answer(
                        fmt.hbold('–ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–´ ‚úÖ'),
                        reply_markup=types.ReplyKeyboardRemove(),
                        parse_mode='HTML'
                    )
                except KeyError:
                    transaction = self.db.get_transaction(message.from_user, transaction_id)
                    tp = '–¢–†–ê–¢–ê 'if transaction[0] == 'spending' else '–ü–†–ò–ë–´–õ–¨'
                    value = transaction[1]
                    name = transaction[2]
                    category = transaction[3]
                    date = transaction[4]
                    await state.update_data(
                        tp=tp,
                        value=value,
                        name=name,
                        category=category,
                        date=date
                    )
                await message.answer(
                    fmt.text(
                        fmt.text(fmt.hunderline(f'–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø #{transaction_id}'), ' üîç\n'),
                        fmt.text(fmt.hbold('–¢–∏–ø: '), fmt.hitalic(f'{tp}')),
                        fmt.text(fmt.hbold('–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '), f'{category}'),
                        fmt.text(fmt.hbold('–û–ø–∏—Å–∞–Ω–∏–µ: '), f'{name}'),
                        fmt.text(fmt.hbold('–°—É–º–º–∞: '), f'{value} –≥—Ä–Ω'),
                        fmt.text(fmt.hbold('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: '), f'{date}'),
                        sep='\n'
                    ), parse_mode='HTML', reply_markup=keyboard
                )

    async def edit_category(self, call: types.CallbackQuery, state: FSMContext):
        await state.set_state(StatsMenu.edit_category)
        await call.message.delete_reply_markup()
        user_data = await state.get_data()
        default = self.db.get_settings()
        if user_data['tp'] == '–ü–†–ò–ë–´–õ–¨':
            buttons = [default['pr1'], default['pr2'], default['pr3']]
        else:
            buttons = [default['sp1'], default['sp2'], default['sp3']]
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        keyboard.add(*buttons)
        await call.message.answer(
            fmt.text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é ', fmt.hbold('–∫–∞—Ç–µ–≥–æ—Ä–∏—é'), ' —Å–æ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. üìö'
            ),
            reply_markup=keyboard, parse_mode='HTML'
        )

    async def edit_name(self, call: types.CallbackQuery, state: FSMContext):
        await state.set_state(StatsMenu.edit_name)
        await call.message.delete_reply_markup()
        await call.message.answer(
            fmt.text(
                '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ ', fmt.hbold('–Ω–∞–∑–≤–∞–Ω–∏–µ'), ' –∏–ª–∏ ', fmt.hbold('–æ–ø–∏—Å–∞–Ω–∏–µ'), ' üè∑'
            ), parse_mode='HTML'
        )

    async def edit_value(self, call: types.CallbackQuery, state: FSMContext):
        await state.set_state(StatsMenu.edit_value)
        await call.message.delete_reply_markup()
        await call.message.answer(
            fmt.text(
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ',
                fmt.hcode('1800'), ' –∏–ª–∏ ', fmt.hcode('244.33'), ' üíµ'
            ), parse_mode='HTML'
        )

    async def edit_date(self, call: types.CallbackQuery, state: FSMContext):
        await state.set_state(StatsMenu.edit_date)
        await call.message.delete_reply_markup()
        await call.message.answer(
            fmt.text(
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:',
                fmt.hcode('01.01.2000 09:43'), 'üìÜ',
                sep=' '
            ), parse_mode='HTML'
        )

    async def save_edit(self, call: types.CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        self.db.update_transaction(call.from_user, user_data)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='stats'))
        await call.message.answer(
            fmt.hbold('–ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù–´ –í –ë–ê–ó–ï üíæ‚úÖ'),
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    async def delete_transaction(self, message: types.Message, state: FSMContext):
        transaction_id = message.text.replace('/delete ', '')
        if not transaction_id.isdigit():
            await message.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ /delete 293')
        else:
            if not self.db.check_id(message.from_user, transaction_id):
                await message.reply('–£ –≤–∞—Å –Ω–µ —Ç–∞–∫–æ–≥–æ ID üò≥\n–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!')
            else:
                self.db.delete_transaction(message.from_user, transaction_id)
                await message.answer(
                    fmt.hbold('–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–ê –° –ë–ê–ó–´ ‚úÖ'),
                    parse_mode='HTML'
                )
