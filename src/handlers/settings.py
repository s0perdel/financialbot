from aiogram import types
from aiogram.dispatcher import FSMContext
import aiogram.utils.markdown as fmt
from src.states import SettingsMenu, MainMenu
from config import VERSION


class Settings:
    def __init__(self, db):
        self.db = db

    async def start(self, call: types.CallbackQuery):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üìã', callback_data='category_settings'),
            types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É üí≥', callback_data='coming_soon'),
            types.InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ üí¨', callback_data='coming_soon'),
            types.InlineKeyboardButton(text='–û –±–æ—Ç–µ –∏ –∞–≤—Ç–æ—Ä–µ üíª', callback_data='about'),
            types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='cancel')
        ]
        keyboard.add(*buttons)
        await call.message.edit_text(
            fmt.text(
                fmt.hbold('–ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ‚öô\n'),
                fmt.text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫!'),
                fmt.text('–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö '
                         '–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É, —è–∑—ã–∫ –±–æ—Ç–∞, '
                         '—É–∑–Ω–∞—Ç—å –æ –±–æ—Ç–µ –∏ –∞–≤—Ç–æ—Ä–µ.'),
                sep='\n'
            ), reply_markup=keyboard, parse_mode='HTML'
        )

    async def soon(self, call: types.CallbackQuery):
        await call.answer('–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω üò¢')

    async def category_settings(self, call: types.CallbackQuery, state: FSMContext):
        await state.set_state(SettingsMenu.category_settings)
        await call.message.delete_reply_markup()
        default = self.db.get_settings(call.from_user)
        await call.message.edit_text(
            fmt.text(
                fmt.hbold('–ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ'),
                fmt.text('–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª–∏–±–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–π '
                         '–≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞—Ç –∏ –ø—Ä–∏–±—ã–ª–∏ –≤ –±—ã—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–µ '
                         '(–ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∏), –≤ —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –∏—Ö –ø–æ–º–µ–Ω—è—Ç—å!'),
                fmt.hunderline('–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±—ã—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –¢–†–ê–¢:'),
                fmt.text(f'{default["sp1"]}\n{default["sp2"]}\n{default["sp3"]}'),
                fmt.hunderline('–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –±—ã—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ü–†–ò–ë–´–õ–ò:'),
                fmt.text(f'{default["pr1"]}\n{default["pr2"]}\n{default["pr3"]}'),
                fmt.text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –ó–ê–ü–Ø–¢–£–Æ, –ø—Ä–∏–º–µ—Ä:\n',
                         fmt.hcode('–ï–¥–∞,–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç,–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è,–ó–∞—Ä–ø–ª–∞—Ç–∞,–ü–æ—Å–æ–±–∏–µ,–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞')),
                sep='\n\n'
            ), parse_mode='HTML'
        )

    async def category_confirm(self, message: types.Message, state: FSMContext):
        categories = message.text.split(',')
        if len(categories) != 6:
            await message.reply('–û—à–∏–±–∫–∞! –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏–π, '
                                '3 –Ω–∞ —Ç—Ä–∞—Ç—ã, –∏ 3 –Ω–∞ –ø—Ä–∏–±—ã–ª–∏.')
        else:
            self.db.update_categories(message.from_user, categories)
            await state.set_state(MainMenu.anti_input)
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='settings'))
            await message.answer(
                fmt.hbold('–ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù–´ –í –ë–ê–ó–ï ‚úÖ'),
                reply_markup=keyboard,
                parse_mode='HTML'
            )

    async def about(self, call: types.CallbackQuery):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='settings'))
        await call.message.edit_text(
            fmt.text(
                fmt.hbold('–ò–ù–§–û\n'),
                fmt.text(fmt.hunderline('–ê–≤—Ç–æ—Ä –±–æ—Ç–∞:'), ' @ledrep0s'),
                fmt.text(fmt.hunderline('–í–µ—Ä—Å–∏—è:'), f' {VERSION}\n'),
                fmt.text('–≠—Ç–æ—Ç –±–æ—Ç —ç—Ç–æ –º–æ–π pet-project –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ, '
                         '–æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –æ–∫–æ–ª–æ –Ω–µ–¥–µ–ª–∏, –∏ —è –±—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥ –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–º '
                         '–±—É–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è! –ï—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –∏–¥–µ–∏ –ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª—Å.'),
                sep='\n'
            ), reply_markup=keyboard, parse_mode='HTML'
        )
